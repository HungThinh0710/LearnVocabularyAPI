openapi: 3.0.0
info:
  title: Learn Vocabulary API
  description: >-
    API documentations for LearnVocabulary application
  contact:
    name: "Hung Thinh (Phoenix)"
    url: "https://hungthinhit.com"
    email: "nhtnokia@gmail.com"
  license:
    name: "MIT"
    url: "https://choosealicense.com/licenses/mit/"
  version: 1.0.1
servers:
  - url: 'http://localhost:3000'
tags:
  - name: Users
    description: User management.
  - name: Categories
    description: Categories management.
paths:

  #Users docs

  /user/register:
    #FIXME:
    post:
      summary: [22:15_29032020-BUG]
      tags: [Users]
      description: Register.
      deprecated: true
      parameters:
        - in: body
          name: name
          required: true
          schema:
            type: string
          description: Your fullname.
        - in: body
          name: email
          required: true
          schema:
            type: string
          description: Email of account.
        - in: body
          name: password
          required: true
          schema:
            type: string
          description: Password of account.
      responses: 
          '':
              description: .
  /user:
    get:
      summary: Get information of User
      tags: [Users]
      description: Use to get information of current user.
      security:
      - Bearer: []
      responses: 
        '':
            description: .
    post:
      summary: Login
      tags: [Users]
      description: Login.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email: 
                  $ref: '#/components/schemas/User/properties/email'
                password: 
                  $ref: '#/components/schemas/User/properties/password'
              required:
                - email
                - password
          application/json:
            schema:
              type: object
              properties:
                email: 
                  $ref: '#/components/schemas/User/properties/email'
                password: 
                  $ref: '#/components/schemas/User/properties/password'
              required:
                - email
                - password
      responses: 
        '':
            description: .

  #Categories docs

  /categories:
    get:
      summary: Get the categories
      tags: [Categories]
      description: Get the current categories or public categories.
      security:
        - Bearer: []
      parameters: 
        - $ref: '#components/parameters/page' 
        - $ref: '#components/parameters/pageSize'
        - $ref: '#components/parameters/isPublic'
        - $ref: '#components/parameters/type'
      responses: 
        '':
            description: .
    post:
      summary: Create a category
      tags: [Categories]
      description: Create a category with name and isPublic
      security:
      - Bearer: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name: 
                  $ref: '#/components/schemas/Category/properties/name'
                isPublic: 
                  $ref: '#/components/schemas/Category/properties/isPublic'
              required:
                - name
                - isPublic
          application/json:
            schema:
              type: object
              properties:
                name: 
                  $ref: '#/components/schemas/Category/properties/name'
                isPublic: 
                  $ref: '#/components/schemas/Category/properties/isPublic'
              required:
                - name
                - isPublic
      responses: 
        '':
            description: .
  /categories/{categoryId}:
    get:
      summary: Get detail category with it cards.
      tags: [Categories]
      description: Get detail of category and it cards by Id.
      security:
        - Bearer: []
      parameters:
          - name: categoryId
            in: path
            required: true
            schema:
              type: integer
          - $ref: '#components/parameters/page' 
          - $ref: '#components/parameters/pageSize' 
      responses: 
        '':
            description: .
    patch:
      summary: Chane the category name
      tags: [Categories]
      description: Chane the category name with id.
      security:
        - Bearer: []
      parameters:
          - name: categoryId
            in: path
            required: true
            schema:
              type: integer
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name: 
                  $ref: '#/components/schemas/Category/properties/name'
              required:
                - name
          application/json:
            schema:
              type: object
              properties:
                name: 
                  $ref: '#/components/schemas/Category/properties/name'
              required:
                - name
      responses: 
        '':
            description: .
components:
  schemas:
    User:
      type: object
      properties:
          email:
              type: string
              description: Email of account
              example: example@hungthinhit.com
          password:
              type: string
              description: Password at least 6 characters
          isVerifyEmail:
              type: integer
              description: Is verify email or not (0 is not/ 1 is verified)
              example: 0
          userType:
              type: string(ref to UserTypeTable)
          createdAt:
              type: timestamps
          updatedAt:
              type: timestamps
      xml:
          name: User
    Category:
      type: object
      properties:
          userId: 
              type: integer
              description: Id of User.
          name:
              type: string
              description: Name of category
          isPublic:
              type: integer
              description: Set the current local/public category (1 is public and 0 is local).
              example: 0
          vote:
              type: integer
          createdAt:
              type: timestamps
          updatedAt:
              type: timestamps    
      xml: 
          name: Category
  parameters:
    page:
      in: query
      name: page
      require: false
      description: Get page of list values. 
      schema: 
        type: integer
        minimum: 1
    pageSize: 
      in: query
      name: pageSize
      require: false
      description: Amount item of perpage.
      schema: 
        type: integer
        minimum: 1
    isPublic:
      in: query
      name: isPublic
      schema:
        type: integer
        minimum: 0
        maximum: 1
      description: Get the current local/public categories of user (1 is public and 0 is local).
    type:  
      in: query
      name: type
      schema:
        type: string
      description: Get the local or public categories ("global" or "local").
  securitySchemes:
    Bearer: 
      # description: "Token for authentication"
      description: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNTg2MzU2MDM1fQ.S7lG1gVj8oRiPWcefdVMMrKatXtthiGGAPCZ45QpyfE"
      type: "apiKey"
      name: "Authorization"
      in: "header"
